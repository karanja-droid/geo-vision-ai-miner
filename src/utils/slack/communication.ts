
import { toast } from "@/hooks/use-toast";
import { getSlackConfig } from "./config";
import { sendToSlack } from "./sender";

// Send a direct message to a specific Slack channel
export const sendDirectMessage = async (
  message: string,
  channelId: string,
  attachments?: any[],
  options?: { notifyUser?: boolean }
): Promise<boolean> => {
  const config = getSlackConfig();
  
  if (!config.enabled || !config.webhookUrl) {
    console.warn('Slack integration is not enabled or webhook URL is not configured');
    return false;
  }

  try {
    const result = await sendToSlack(message, channelId, attachments);
    
    // Show toast notification if requested
    if (options?.notifyUser) {
      toast({
        title: "Message Sent",
        description: `Your message has been sent to the Slack channel`,
      });
    }
    
    return result;
  } catch (error) {
    console.error('Failed to send message to Slack:', error);
    
    if (options?.notifyUser) {
      toast({
        title: "Message Failed",
        description: "Failed to send your message to Slack. Please try again.",
        variant: "destructive"
      });
    }
    
    return false;
  }
};

// Send structured message with user information
export const sendUserMessage = async (
  content: string,
  userName: string,
  userRole: string,
  channelId: string,
  options?: { 
    notifyUser?: boolean, 
    threadTs?: string,
    includeTimestamp?: boolean
  }
): Promise<boolean> => {
  // Create formatted message
  const formattedMessage = options?.includeTimestamp 
    ? `*${userName}* (${userRole}) - _${new Date().toLocaleString()}_\n${content}`
    : `*${userName}* (${userRole})\n${content}`;
  
  // Create attachment with additional context
  const attachments = [{
    color: "#3AA3E3",
    footer: `Sent from GeoVision AI Platform ${window.location.pathname}`,
    ts: Math.floor(Date.now() / 1000)
  }];
  
  return sendDirectMessage(
    formattedMessage,
    channelId,
    attachments,
    { notifyUser: options?.notifyUser }
  );
};

// Share insights with Slack
export const shareInsightsToSlack = async (
  insights: string[],
  title: string,
  channelId: string,
  options?: { notifyUser?: boolean }
): Promise<boolean> => {
  // Format insights as a list
  const insightsList = insights.map(insight => `â€¢ ${insight}`).join('\n');
  
  const message = `ðŸ“Š *${title}*\n\n${insightsList}`;
  
  const attachments = [{
    color: "#36a64f",
    footer: "Generated by GeoVision AI Analysis",
    ts: Math.floor(Date.now() / 1000)
  }];
  
  return sendDirectMessage(
    message,
    channelId,
    attachments,
    { notifyUser: options?.notifyUser }
  );
};
